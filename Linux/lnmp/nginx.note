基础：
	1. 配置文件    /usr/local/nginx/conf/nginx.conf
	2. nginx目录  cd /usr/local/nginx/sbin
	3.
一：基础
	1.配置语法
	2.默认模块
	3.log
	4.访问限制
		1.http请求和连接
		2.请求限制和连接限制
		3.access模块配置语法
		4.请求限制局限性
		5.基本安全认证
		6.auth模块配置语法
		7.安全认证局限性
二：
	
	1.静态资源WEB服务
		1.什么是静态资源
		2.静态资源服务场景
		3.静态资源服务配置
		4.客户端缓存
		5.静态资源压缩
		6.防盗链
		7.跨域访问
	2.代理服务
	3.负载均衡
	4.缓存服务

三：
	1.动静分离
	2.rewrite规则
	3.HTTPS服务
		a.HTTPS协议
		b.配置语法
		c.Nginx的HTTPS服务
		d.苹果要求的https服务
	4.Nginx与LUA开发
	5.进阶模块配置
四：中间件架构
	1.常见问题
	2.Nginx 应用层安全防护
		1.sql注入防攻击
		2.请求的访问控制
		3.请求的频率控制
		4.防爬虫
	3.Nginx中间件架构性能优化问题
		1.如何调试性能优化
		2.性能优化影响因素
		3.操作系统性能优化
		4.Nginx性能优化

		1.http 性能压测
		2.性能瓶颈分析
		3.系统性能优化
		4.基于Nginx性能配置优化
	4.新版本特性
	5.中间件架构设计
五：
	1.http协议原理
	2.linux系统原理

六：
	1./opt/app 代码目录
	  /opt/work 脚本目录
	  /opt/backup 备份目录  
	  /opt/logs    自定义日志
	  /opt/download   下载
	    
	2.查看规则 iptables -L
	  iptables -F
	  iptables -t nat -L
	  iptables -t nat -F
	  查看SElinux getenforce
	3. 下载相关 yum install httpd-tools
	4.nginx
		1.IO多路复用 (主动上报) (select,poll,epoll)
			多个描述符的I/O操作都能够在一个线程内并发交替地顺序完成
			服用的同一个线程
		2.epoll
			1.FD就绪，采用系统回调函数之间将fd放入。效率更高
			2.最大连接无限制
			3.模块少，代码模块化
		3.CPU亲和
			每一个worker进程固定在cup上
		4.sendfile
	5.nginx yum 安装
		a.卸载 编译安装nginx
			1. 备份 
				cp /usr/local/nginx/conf/nginx.conf /home/aqie/phpApi/nginx/
				cp /usr/local/nginx/conf/vhosts/www.phpapi.com.conf  /home/aqie/phpApi/nginx/
			2.cd /home/aqie/nginx-1.12.0 
			3.rm -rf /usr/local/nginx rm -rf /home/aqie/nginx-1.12.0
		1. http://nginx.org/en/linux_packages.html#stable
		2. vim /etc/yum.repos.d/nginx.repo
			[nginx]
			name=nginx repo
			baseurl=http://nginx.org/packages/centos/7/$basearch/
			gpgcheck=0
			enabled=1
		3.yum list |grep nginx
		4. yum install nginx    
			nginx -v 查看版本信息
			nginx -V 查看编译信息
		5.  查看rpm 安装的程序
			rpm -ql nginx
	6.nginx 目录配置
		1. /usr/share/nginx/html  站点根目录
		2. /usr/sbin/nginx        nginx 目录
		3. /etc/logrotate.d/nginx  nginx日志轮转,用于logrotate服务日志切割
		4. /etc/nginx/nginx.conf   配置文件
		5. /etc/nginx/fastcgi_params  fastcgi配置
		6. /var/cache/nginx    Nginx缓存服务
		7。/var/log/nginx      Nginx日志记录  /var/log/nginx/access.log
		8. /etc/nginx/conf.d/default.conf  默认配置文件
	7. 启动安装
		1.启动
			systemctl start nginx
		停止
			systemctl stop nginx
		重启
			systemctl restart nginx

七： 基于nginx的中间件架构
	1. HTTP请求
		1.request 请求行，请求头，请求数据
		2.response 状态行，消息报头，响应正文
		3. curl -v www.baidu.com >/dev/baidu  查看请求，并保存响应页面
	2.Nginx日志类型
		1.error.log access.log
		2.log_format
		3. tail -f 
		4. nginx -t -c /etc/nginx/nginx.conf  检查配置文件正确与否
		   nginx -s reload -c /etc/nginx/nginx.conf 重新加载配置文件
		   ps -aux|grep nginx
	3. Nginx 变量
		1. HTTp请求变量 
			arg_PARAMETER,http_HEADER(request请求输出),
			send_http_HEADER(response head)
		2.内置变量
		3.自定义变量
		4. /etc/nginx/nginx.conf 配置 log_format '$http_user-agent'
		5. curl -v 192.168.144.128:81/admin.html
	4.Nginx 模块讲解
		1.Nginx 官方模块 Context: http,server,location
			a.--with-http_stub_status_module  nginx客户端状态
				default.conf 下配置
				http://192.168.144.128/mystatus  
					1.nginx处理的握手次数; 握手=连接 
					2.nginx处理连接数
					3.总的请求数
			b.--with-http_random_index_module  目录中选择一个随机主页
			c.--with-http_sub_module  		Http内容替换
				1. sub_filter string replacement  指定字符串替换
				2. sub_filter_last_modified on|off 校验服务端内容是否变化
				3. sub_filter_once on|off          匹配html里面一个或多个
			d. -limit_conn_module    连接频率限制
			e. -limit_req_module	 请求频率限制
				写在server外面：
					limit_conn_zone $binary_remote_addr zone=conn_zone:1m;
					limit_req_zone $binary_remote_addr zone=req_zone:1m rate=1r/s;
		2.Nginx 第三方模块
	5. HTTP协议的连接和请求
		1.HTTP请求建立在一次TCP连接基础上
		2.一次TCP请求至少产生一次HTTP请求
	6. 压力测试 ab
		ab -n 50 -c 20 http://192.168.144.128/index.html  (50次请求,并发20)
	7.nginx 访问控制
		1. 基于ip访问控制 http_access_module
			a. allow address|CIDR|unix:|all   (ip,网段,socket)
			   deny (server,http,location,limit_except)
			b. access_module.conf  端口 81 
				1. deny 192.168.0.135;
			c.局限性 (只针对代理,通过 $remote)
				解决办法:
				1. 采用其他HTTP头信息控制访问,HTTP_X_FORWARD_FOR
				2.结合geo模块
				3.通过HTTP自定义变量传递
		2. 基于用户的信任登录 http_auth_basic_module
			1. yum install httpd-tools -y
			2. cd /etc/nginx  gtpasswd -c ./auth_conf aqie 123
			3. ls ./auth_conf  查看文件
			4. more auth_conf
			5.问题：
				1.用户信息依赖文件方式
				2.操作管理机械，效率低下
				3.解决：
					1.nginx +LUA
					2.nginx +LDAP nginx-auth-ldap模块
		3. http_x_forearded_for = Client Ip ,Proxy IP

八：常见的Nginx中间架构
	1.静态资源WEB服务
		1.什么是静态资源
		2.静态资源服务场景(CDN 传输延迟最小化)
		3.静态资源服务配置
		4.客户端缓存
		5.静态资源压缩
			http_gzip_static_module 预读gzip功能(主要0)
			http_gunzip_module 应用支持gunzip的压缩方式
			gzip time.jpg
		6.防盗链
		7.跨域访问
	2.代理服务
	3.负载均衡调度器SLB
	4.动态缓存
	5.浏览器缓存
		1.Expires, Cache-control
		2.Etag 头信息脚丫
		3.Last-Modlfied头信息校验
		4.没有更新返回304,从缓存中读取,不一致返回200
	6. expires 给浏览器添加 Cache-Control Expires 头
	7.跨站访问
		1.浏览器禁止跨域访问
			a.不安全 CSRF
			b.Access-Control-Allow-Origin
		2.  cd /etc/nginx/conf.d/
			default.conf 80
			access_module.conf 81
			gunzip.com 82
			test.conf 83
			proxy.conf 84
			location.conf 85
			try_files.conf 86
			alias_root 88
			test_php       89
			dynamic-static  90  动静分离 /home/aqie/phpApi/code5
			phpApi 			91  phpApi yaf框架 (http://192.168.144.128:91/user/test)
			Rewrite 		92  域名重定向  code6
		3. 同源是指，域名(www.123.com, abc.123.com)，协议，端口均相同
			1. jsonp
			2. php server 代理
			3. php端修改header
			4. nginx服务器修改header
	8.防盗链
		1.区分哪些请求是非正常用户
			a.http_refer 防盗链配置模块
			b. tree -L 2 phpApi
			c. curl http://192.168.144.128:83/images/1.jpg
			d. curl -I http://192.168.144.128:83/images/1.jpg
			e. curl -e "https://www.baidu.com/" -I http://192.168.144.128:83/images/1.jpg
			f. curl -e "http://192.168.144.128" -I http://192.168.144.128:83/images/1.jpg
	9.代理服务
		1.http -> http server
			a.正向代理 客户端->代理(代理的客户端)->服务端 (翻墙,通过一台电脑上网)
			b.反向代理 客户端请求的代理服务器(代理的服务器)
		2.ICMP|POP|IMAP -> mail server
		3.Https -> http server
		4.RTMP -> media server
		5. 端口请求80端口,反向代理访问8080
			location ~ /proxy.html$ {
				proxy_pass http://127.0.0.1:8080
			} 
		6.正向代理
			// dns解析
			resolve 8.8.8.8;
			location / {
				proxy_pass http://$http_host$request_url;
			}
		7.重定向 proxy_redirect default
		8.缓冲区 proxy_buffering on|off
		9.头信息 proxy_set_header field value 携带头信息
		10.连接超时 proxy_connect_timeout time
	10.负载均衡
		1.GSLB
			调度节点访问本地的应用服务
		2.SLB
			用户节点-> 调度节点->服务节点
		a. 四层负载均衡(传输层)

		b. 七层负载均衡(应用层) nginx
		5. nginx负载均衡
			1. Nginx->proxy_pass->upstreame server
			2. 语法 upstreame name 这个必须配置在http
			3. 116.62.103.226:8002
		6.调度算法
			1.ip_hash;
			2.url_hash;
			3.轮询
			4.加权轮询
			5.least_conn
			6. hash_key  （配置在 upstream）
				hash $request_url;  后面参数用正则匹配出来判断
	11.缓存服务
		1.缓存分类：
			1. 服务端缓存： memcache redis
			2. 代理缓存 ： 代理/中间件
			3. 客户端缓存:
		2. proxy_cache 配置
			1.
		3.大文件分片请求 (http_slice_module)
			1.slice xize

九：架构
	1.相同server_name多个虚拟主机优先级访问
	2.location 匹配优先级
		a. = 精确匹配; ^~ 前缀匹配  这两个不在匹配正则
		b. ~  ~*不区分大小写
	3.try_files使用
		1.
	4.Nginx 的alias和root使用
		1.
		2.
	5.传递用户真实ip
		1.通过很多层代理 (通过第一层代理,约定信息头)
	6.  常见错误码
		1. 413: client_max_body_size
		2. 502 bad gateway网关：后端服务无响应 
		3. 504 Gateway Time out : 后端服务执行超时

十：Nginx 性能优化
	1. 如何优化
		1. 系统结构瓶颈：观测指标，压力测试
		2. 业务模式：接口业务类型，系统层次化结构 (代理，动静分离)
		3.性能与安全：
	2. ab
		1.
	3. 系统与Nginx性能优化
		1.网络
		2.系统(硬件)
		3.服务(nginx)
		4.程序(php,java)
		5.数据库，底层服务
	a. 系统与Nginx性能优化
		1. 文件句柄
			linux\Unix一切皆文件,文件句柄就是索引
		2. 设置方式
			系统全局修改,用户局部性修改,进程局部性修改
			vim /etc/security/limits.conf
			root soft nofile 65535  指定用户
			root hard nofile 65535

			# 最大线程数和文件数
			* soft noproc 65535
			* hard noproc 65535
			*    soft nofile 25535  通配符(软限制值要小于或等于硬限制)
			*    hard nofile 25535

			vim /etc/nginx/nginx.conf
			worker_rlimit_nofile 35535;  针对进程
		3.cpu性能
			1. 查看CPU : cat /proc/cpuinfo|grep "physical id"|sort|uniq|wc -l
			双cpu：多少物理CPU
			2. cpu核心数 cat /proc/cpuinfo|grep "cpu cores"|uniq    2 * 1
			3. top  然后按1
			4. vim /etc/nginx/nginx.conf
				1. worker_processes  2;  启动多少worker进程 (最好和核心数一致)
				2. 查看当前nginx使用cpu ps -eo pid,args,psr | grep [n]ginx (pid,进程名,使用的那个cpu)
				3. worker_cpu_affinity auto;
				4. worker_connections 10240;  10240 * 总核心数  = 处理连接总数
				5. 作为静态资源服务器打开 tcp_nopush 
				   动态接口 打开 tcp_nodeny
		4.  10240 worker_connections exceed open file resource limit: 1024
				(http://lutaoxu.blog.51cto.com/4224602/1614559)
			1.more /proc/sys/fs/file-max  94959 (系统最大限制)
				ulimit -n ： Linux的最大文件数限制 (每个进程打开最大文件数)
			2.vim /etc/pam.d/login文件
				添加 session  required  /lib64/security/pam_limits.so
			3. 让Linux在启动完成后强行将系统级打开文件数硬限制设置为65535
				1. 修改 /etc/rc.local
				2. 添加 echo "65535" > /proc/sys/fs/file-max
				3. 还可以在 rc.local 里面 明确命令 ulimit -n 10240
				4. 除了系统设置也可以在nginx设置中： worker_rlimit_nofile 35535
			4.  最大连接数 = worker_processes * worker_connections/4

十一： Nginx 架构安全
	1.常见恶意行为
		1.爬虫，恶意抓取，资源盗用
		2.基础防盗链
		3.secure_link_module 对数据安全性提高加密验证和失效性
			(核心重要数据)
		4.access_module 对后台。部分用户服务提供IP防护
	2. 应用层攻击手段
		1.后台密码撞库，
			a. 后台密码复杂度
			b. access_module 对后台提供IP防控
			c. 预警机制
		2.常见的攻击手段
			1. 文件上传漏洞(上传接口代码植入服务器,通过url访问执行代码)
			  http://www.aqie.com/upload/1.jpg/1.php 将1.jpg作为php代码执行
			  location ^~ /upload {
			  	root /opt/app/images;
			  	if($request_filename ~*(.*)\.php) {
			  		return 403;
			  	}
			  }
			2. SQL注入 (用户 -http> Nginx+LUA -Fastcgi> PHP -> mysql )
				1.
	3. Nginx防攻击策略
		1.
	4. Nginx+LUA 安全的waf防火墙
		1. Cookie攻击; 异常post请求; cc攻击; 拦截URL参数;拦截arg
		2. https://github.com/loveshell/ngx_lua_waf    /opt/download
		3. cd /etc/nginx  && mv /opt/download/ngx_lua_waf/ ./waf/
		4. vim /etc/nginx/nginx.conf 
			lua_package_path "/etc/nginx/waf/?.lua";
			lua_shared_dict limit 10m;
			init_by_lua_file /etc/nginx/waf/init.lua;
			access_by_lua_file /etc/nginx/waf/waf.lua;
	5.基于Nginx的中间件架构
		1.静态资源服务
			a. 不同的目录匹配不同的规则
		2.浏览器端设置对应缓存
			a.	
		3.防盗链
		4.流量限制	
		5.防资源盗用
		6.静态资源压缩	
		7.代理服务 http协议 流媒体，邮件协议，websocket代理
		8.正向代理
		9.反向代理
			1.负载均衡
			2.hash策略
			3.后端节点检查机制
			4.代理缓存设置(时间目录类型)
	6.代理服务
		1.正向代理，反向代理，负载均衡
			LNMP Poxypass 头信息处理
			代理缓存 分片请求 协议类型
		2.硬件：
			CPU  内存 硬盘
		3.系统：
			用户权限 日志目录存放
		4.关联服务
			LVS keepalive (负载均衡)
			syslog (日志同步)
			Fastcgi (php性能调优)
		5.合理配置
			1.日志关闭
		6.了解原理
			1.http协议原理
			2.http状态原理
			3.os原理
		7.关注日志
			1.

十二：Nginx动静分离 (第四章)
	1.保证动静服务器拥有同样的代码项目，一般使用rsync同步软件同步不同服务器中的项目资源文件
	2. 分离资源,减少不必要的请求消耗，减少请求延时
	3.Rewrite (url重定向)
		1. url跳转访问,支持开发设计
			(页面跳转,兼容性支持,展示效果)
		2. SEO优化
		3. 维护
			后台维护，流量转发
		4.安全
	4. rewrite regex replacement
		Context (server.location,if)


